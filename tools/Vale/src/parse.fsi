// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | RESET_OPTIONS of (loc * string)
  | VERBATIM_BLOCK of (string list)
  | VERBATIM of (loc)
  | STRING of (loc * string)
  | INCLUDE of (loc)
  | FORALL of (loc)
  | EXISTS of (loc)
  | LAMBDA of (loc)
  | RETURNS of (loc)
  | LETS of (loc)
  | REQUIRES of (loc)
  | ENSURES of (loc)
  | READS of (loc)
  | MODIFIES of (loc)
  | PRESERVES of (loc)
  | LEMMA of (loc)
  | CALL of (loc)
  | RETURN of (loc)
  | IF of (loc)
  | WHILE of (loc)
  | FOR of (loc)
  | GOTO of (loc)
  | ASSERT of (loc)
  | BY of (loc)
  | ASSUME of (loc)
  | CALC of (loc)
  | DECREASES of (loc)
  | INVARIANT of (loc)
  | COLON of (loc)
  | COLONBAR of (loc)
  | YIELD of (loc)
  | SEMI of (loc)
  | TYPE of (loc)
  | VAR of (loc)
  | CONST of (loc)
  | READONLY of (loc)
  | FUNCTION of (loc)
  | AXIOM of (loc)
  | EXTERN of (loc)
  | PROCEDURE of (loc)
  | STATIC of (loc)
  | MODULE of (loc)
  | IMPORT of (loc)
  | OPERATOR of (loc)
  | IS of (loc)
  | THEN of (loc)
  | ELSE of (loc)
  | LET of (loc)
  | IN of (loc)
  | OUT of (loc)
  | INOUT of (loc)
  | REVEAL of (loc)
  | GHOST of (loc)
  | INLINE of (loc)
  | HAVOC of (loc)
  | OLD of (loc)
  | THIS of (loc)
  | COLONCOLON of (loc)
  | ATEQ of (loc * (bool * string))
  | COLONEQ of (loc * (bool * string))
  | AMPAMP of (loc * (bool * string))
  | BARBAR of (loc * (bool * string))
  | LTEQEQ of (loc * (bool * string))
  | EQEQGT of (loc * (bool * string))
  | LTEQEQGT of (loc * (bool * string))
  | PLUS of (loc * (bool * string))
  | MINUS of (loc * (bool * string))
  | STAR of (loc * (bool * string))
  | SLASH of (loc * (bool * string))
  | PERCENT of (loc * (bool * string))
  | LT of (loc * (bool * string))
  | GT of (loc * (bool * string))
  | EQ of (loc * (bool * string))
  | LE of (loc * (bool * string))
  | GE of (loc * (bool * string))
  | EQEQ of (loc * (bool * string))
  | NE of (loc * (bool * string))
  | BANG of (loc * (bool * string))
  | AT of (loc)
  | COMMA of (loc)
  | DOT of (loc)
  | QLBRACKET of (loc)
  | LBRACKET of (loc)
  | RBRACKET of (loc)
  | LBRACE of (loc)
  | RBRACE of (loc)
  | LPAREN of (loc)
  | RPAREN of (loc)
  | LBRACECOLON of (loc)
  | BV of (loc * int)
  | LITBOOL of (loc * bool)
  | LITREAL of (loc * string)
  | LITINT of (loc * bigint)
  | ID of (loc * string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RESET_OPTIONS
    | TOKEN_VERBATIM_BLOCK
    | TOKEN_VERBATIM
    | TOKEN_STRING
    | TOKEN_INCLUDE
    | TOKEN_FORALL
    | TOKEN_EXISTS
    | TOKEN_LAMBDA
    | TOKEN_RETURNS
    | TOKEN_LETS
    | TOKEN_REQUIRES
    | TOKEN_ENSURES
    | TOKEN_READS
    | TOKEN_MODIFIES
    | TOKEN_PRESERVES
    | TOKEN_LEMMA
    | TOKEN_CALL
    | TOKEN_RETURN
    | TOKEN_IF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_GOTO
    | TOKEN_ASSERT
    | TOKEN_BY
    | TOKEN_ASSUME
    | TOKEN_CALC
    | TOKEN_DECREASES
    | TOKEN_INVARIANT
    | TOKEN_COLON
    | TOKEN_COLONBAR
    | TOKEN_YIELD
    | TOKEN_SEMI
    | TOKEN_TYPE
    | TOKEN_VAR
    | TOKEN_CONST
    | TOKEN_READONLY
    | TOKEN_FUNCTION
    | TOKEN_AXIOM
    | TOKEN_EXTERN
    | TOKEN_PROCEDURE
    | TOKEN_STATIC
    | TOKEN_MODULE
    | TOKEN_IMPORT
    | TOKEN_OPERATOR
    | TOKEN_IS
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_LET
    | TOKEN_IN
    | TOKEN_OUT
    | TOKEN_INOUT
    | TOKEN_REVEAL
    | TOKEN_GHOST
    | TOKEN_INLINE
    | TOKEN_HAVOC
    | TOKEN_OLD
    | TOKEN_THIS
    | TOKEN_COLONCOLON
    | TOKEN_ATEQ
    | TOKEN_COLONEQ
    | TOKEN_AMPAMP
    | TOKEN_BARBAR
    | TOKEN_LTEQEQ
    | TOKEN_EQEQGT
    | TOKEN_LTEQEQGT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_LT
    | TOKEN_GT
    | TOKEN_EQ
    | TOKEN_LE
    | TOKEN_GE
    | TOKEN_EQEQ
    | TOKEN_NE
    | TOKEN_BANG
    | TOKEN_AT
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_QLBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACECOLON
    | TOKEN_BV
    | TOKEN_LITBOOL
    | TOKEN_LITREAL
    | TOKEN_LITINT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Include
    | NONTERM_Includes
    | NONTERM_Type
    | NONTERM_TypeArgs
    | NONTERM_Triggers
    | NONTERM_BindOp
    | NONTERM_Exp
    | NONTERM_Exp1
    | NONTERM_Exps1
    | NONTERM_Exps
    | NONTERM_AnyId
    | NONTERM_AnyIds1
    | NONTERM_AnyIds
    | NONTERM_AnyQualifiedId
    | NONTERM_OpToken
    | NONTERM_AnyIdOrOp
    | NONTERM_CalcOp
    | NONTERM_CalcOpOpt
    | NONTERM_Attrs
    | NONTERM_GhostOpt
    | NONTERM_StmtModifier
    | NONTERM_ExpCall
    | NONTERM_Var
    | NONTERM_VarAttrs
    | NONTERM_VarInit
    | NONTERM_VarType
    | NONTERM_Lhs
    | NONTERM_Lhss1
    | NONTERM_Decreases
    | NONTERM_ExpAssign
    | NONTERM_ExpAssigns1
    | NONTERM_ExpAssigns
    | NONTERM_Stmt
    | NONTERM_IfStmt
    | NONTERM_ElseOpt
    | NONTERM_CalcHints
    | NONTERM_CalcContents
    | NONTERM_Block
    | NONTERM_Formal
    | NONTERM_Formals1
    | NONTERM_Formals
    | NONTERM_InOut
    | NONTERM_ProcFormal
    | NONTERM_ProcFormals1
    | NONTERM_ProcFormals
    | NONTERM_LetBind
    | NONTERM_LetBinds
    | NONTERM_SemiExp
    | NONTERM_SemiExps
    | NONTERM_Req
    | NONTERM_SpecRaw
    | NONTERM_Specs
    | NONTERM_Invariants
    | NONTERM_Proc
    | NONTERM_ProcRet
    | NONTERM_Decl
    | NONTERM_Decls
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (include_decl list * decls) 
