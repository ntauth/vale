#
# Main file for building the ImportFStarTypes tool
#

# Python imports
import os, os.path
import sys
import collections
# Scons imports
import SCons.Util

# Imported identifiers defined in the SConstruct file
Import('env')
Import('win32')
Import('do_build')
Import('mono')
Import('dafny_path')

bin_dir = Dir('#bin')
build_dir = Dir('#tools/FsLexYacc/FsLexYacc.6.1.0/build')    # the '#' character makes this relative to the SConstruct file in the root of the repo
fslex_exe = File(f'{build_dir}/fslex.exe')
fsyacc_exe = File(f'{build_dir}/fsyacc.exe')

def abspaths(files):
  return ' '.join([x.abspath for x in files])

def build_tool(sources, refs):
  senv = env.Clone()
  r_refs = " ".join([f'-r {x}' for x in refs])
  if win32:
    # probe for the F# compiler on the PATH
    fsc_exe = FindFile('fsc.exe', os.environ['PATH'].split(';'))
    if fsc_exe == None:
      installdir = os.environ.get('FSHARPINSTALLDIR')
      if installdir == None:
        raise EnvironmentError('fsc.exe missing from path and FSHARPINSTALLDIR.')
      fsc_exe = File(os.path.join(installdir, 'fsc.exe'))
    fsc_exe = f'"{fsc_exe}"'
  else:
    fsc_exe = 'fsharpc'
  tool_exe = File(f'{bin_dir}/importFStarTypes.exe')
  tool_exe = senv.Command(tool_exe, sources,
    f'{fsc_exe} -g --platform:anycpu --standalone --mlcompatibility -O {abspaths(sources)} -o {tool_exe} {r_refs}')
  for r in refs:
    Depends(tool_exe, r)
  return tool_exe

TOOL_SOURCES = [
  'src/ast.fs',
  'src/parse_util.fs',
  '../../obj/ImportFStarTypes/parse.fs',
  '../../obj/ImportFStarTypes/lex.fs',
  'src/main.fs'
  ]

REFS = [
  '../../tools/FsLexYacc/FsLexYacc.Runtime.6.1.0/lib/net40/FsLexYacc.Runtime.dll'
  ]

lex_fsl = File('src/lex.fsl')
parse_fsy = File('src/parse.fsy')
lex_fs = File('#obj/ImportFStarTypes/lex.fs')
parse_fs = File('#obj/ImportFStarTypes/parse.fs')
env.Command(lex_fs, lex_fsl, f'{mono} {fslex_exe} {lex_fsl.abspath} -o {lex_fs}')
env.Command(parse_fs, parse_fsy, f'{mono} {fsyacc_exe} --module "Parse" {parse_fsy.abspath} -o {parse_fs}')
tool_exe = build_tool([File(x) for x in TOOL_SOURCES], [File(x) for x in REFS])
